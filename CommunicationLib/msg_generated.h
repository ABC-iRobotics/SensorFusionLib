// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MSG_SENSORDATAMSG_H_
#define FLATBUFFERS_GENERATED_MSG_SENSORDATAMSG_H_

#include "flatbuffers/flatbuffers.h"

namespace SensorDataMsg {

struct Msg;

enum ValueType {
  ValueType_TOFILTER_MEASUREMENT = 0,
  ValueType_TOFILTER_DISTURBANCE = 1,
  ValueType_FROMFILTER_PREDICTEDSTATE = 2,
  ValueType_FROMFILTER_FILTEREDSTATE = 3,
  ValueType_FROMFILTER_PREDICTEDOUTPUT = 4,
  ValueType_FROMFILTER_MEASUREDOUTPUT = 5,
  ValueType_FROMFILTER_USEDDISTURBANCE = 6,
  ValueType_FROMFILTER_USEDNOISE = 7,
  ValueType_MIN = ValueType_TOFILTER_MEASUREMENT,
  ValueType_MAX = ValueType_FROMFILTER_USEDNOISE
};

inline const ValueType (&EnumValuesValueType())[8] {
  static const ValueType values[] = {
    ValueType_TOFILTER_MEASUREMENT,
    ValueType_TOFILTER_DISTURBANCE,
    ValueType_FROMFILTER_PREDICTEDSTATE,
    ValueType_FROMFILTER_FILTEREDSTATE,
    ValueType_FROMFILTER_PREDICTEDOUTPUT,
    ValueType_FROMFILTER_MEASUREDOUTPUT,
    ValueType_FROMFILTER_USEDDISTURBANCE,
    ValueType_FROMFILTER_USEDNOISE
  };
  return values;
}

inline const char * const *EnumNamesValueType() {
  static const char * const names[] = {
    "TOFILTER_MEASUREMENT",
    "TOFILTER_DISTURBANCE",
    "FROMFILTER_PREDICTEDSTATE",
    "FROMFILTER_FILTEREDSTATE",
    "FROMFILTER_PREDICTEDOUTPUT",
    "FROMFILTER_MEASUREDOUTPUT",
    "FROMFILTER_USEDDISTURBANCE",
    "FROMFILTER_USEDNOISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameValueType(ValueType e) {
  if (e < ValueType_TOFILTER_MEASUREMENT || e > ValueType_FROMFILTER_USEDNOISE) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesValueType()[index];
}

struct Msg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_SENSORID = 6,
    VT_VALUE_VECTOR = 8,
    VT_VARIANCE_MATRIX = 10,
    VT_TIMESTAMP_IN_US = 12
  };
  ValueType type() const {
    return static_cast<ValueType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  int32_t sensorID() const {
    return GetField<int32_t>(VT_SENSORID, 0);
  }
  const flatbuffers::Vector<float> *value_vector() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_VALUE_VECTOR);
  }
  const flatbuffers::Vector<float> *variance_matrix() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_VARIANCE_MATRIX);
  }
  uint64_t timestamp_in_us() const {
    return GetField<uint64_t>(VT_TIMESTAMP_IN_US, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_SENSORID) &&
           VerifyOffset(verifier, VT_VALUE_VECTOR) &&
           verifier.VerifyVector(value_vector()) &&
           VerifyOffset(verifier, VT_VARIANCE_MATRIX) &&
           verifier.VerifyVector(variance_matrix()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP_IN_US) &&
           verifier.EndTable();
  }
};

struct MsgBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(ValueType type) {
    fbb_.AddElement<uint8_t>(Msg::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_sensorID(int32_t sensorID) {
    fbb_.AddElement<int32_t>(Msg::VT_SENSORID, sensorID, 0);
  }
  void add_value_vector(flatbuffers::Offset<flatbuffers::Vector<float>> value_vector) {
    fbb_.AddOffset(Msg::VT_VALUE_VECTOR, value_vector);
  }
  void add_variance_matrix(flatbuffers::Offset<flatbuffers::Vector<float>> variance_matrix) {
    fbb_.AddOffset(Msg::VT_VARIANCE_MATRIX, variance_matrix);
  }
  void add_timestamp_in_us(uint64_t timestamp_in_us) {
    fbb_.AddElement<uint64_t>(Msg::VT_TIMESTAMP_IN_US, timestamp_in_us, 0);
  }
  explicit MsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MsgBuilder &operator=(const MsgBuilder &);
  flatbuffers::Offset<Msg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Msg>(end);
    return o;
  }
};

inline flatbuffers::Offset<Msg> CreateMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    ValueType type = ValueType_TOFILTER_MEASUREMENT,
    int32_t sensorID = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> value_vector = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> variance_matrix = 0,
    uint64_t timestamp_in_us = 0) {
  MsgBuilder builder_(_fbb);
  builder_.add_timestamp_in_us(timestamp_in_us);
  builder_.add_variance_matrix(variance_matrix);
  builder_.add_value_vector(value_vector);
  builder_.add_sensorID(sensorID);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Msg> CreateMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    ValueType type = ValueType_TOFILTER_MEASUREMENT,
    int32_t sensorID = 0,
    const std::vector<float> *value_vector = nullptr,
    const std::vector<float> *variance_matrix = nullptr,
    uint64_t timestamp_in_us = 0) {
  auto value_vector__ = value_vector ? _fbb.CreateVector<float>(*value_vector) : 0;
  auto variance_matrix__ = variance_matrix ? _fbb.CreateVector<float>(*variance_matrix) : 0;
  return SensorDataMsg::CreateMsg(
      _fbb,
      type,
      sensorID,
      value_vector__,
      variance_matrix__,
      timestamp_in_us);
}

inline const SensorDataMsg::Msg *GetMsg(const void *buf) {
  return flatbuffers::GetRoot<SensorDataMsg::Msg>(buf);
}

inline const SensorDataMsg::Msg *GetSizePrefixedMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SensorDataMsg::Msg>(buf);
}

inline bool VerifyMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SensorDataMsg::Msg>(nullptr);
}

inline bool VerifySizePrefixedMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SensorDataMsg::Msg>(nullptr);
}

inline void FinishMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SensorDataMsg::Msg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SensorDataMsg::Msg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SensorDataMsg

#endif  // FLATBUFFERS_GENERATED_MSG_SENSORDATAMSG_H_
