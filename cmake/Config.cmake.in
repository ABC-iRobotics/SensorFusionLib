# @export_config_name@ project
# The package provides you the list of targets as "@export_config_name@_Libs"
# The installed targets are "@LIBS_TO_INSTALL@"

#Check versions of targets to be installed
set(SF_VERSION_FULL "@GIT_VERSION_FULL@")
set(SF_VERSION "@GIT_TAG_VERSION@")

message(STATUS "@export_config_name@ FOUND\n@export_config_name@ version: ${SF_VERSION_FULL}")

# Get the installed and not installed configurations
file(GLOB _CONFIG_FILES "${CMAKE_CURRENT_LIST_DIR}/cmake/@export_targets@-${CMAKE_GENERATOR_PLATFORM}-*.cmake")
foreach (_config ${CMAKE_CONFIGURATION_TYPES})
	string(TOLOWER ${_config} __config)
	set(_${__config}_installed false)
endforeach()
foreach(f ${_CONFIG_FILES})
	string(REGEX REPLACE ".*@export_targets@-${CMAKE_GENERATOR_PLATFORM}-(.*)\\.cmake" "\\1" FOUND_CONFIGURATION "${f}")
	message(STATUS "@export_config_name@ configuration: ${FOUND_CONFIGURATION}")
	string(TOLOWER ${FOUND_CONFIGURATION} __config)
	set(_${__config}_installed true)
	include(${CMAKE_CURRENT_LIST_DIR}/cmake/@export_config_name@VersionCheck-${CMAKE_GENERATOR_PLATFORM}-${FOUND_CONFIGURATION}.cmake)
endforeach()
if (DEFINED _debug_installed AND NOT _debug_installed)
	message(SEND_ERROR "Configuration Debug is not installed!")
endif()

#Find dependencies
include(CMakeFindDependencyMacro)
macro(find_dependency_in_install name version)
	find_dependency(${name} ${version} QUIET PATHS "${CMAKE_CURRENT_LIST_DIR}/Third parties" NO_DEFAULT_PATH)
	if (NOT ${name}_FOUND)
		find_dependency(${name} ${version} REQUIRED)
	endif()
endmacro()
#Find OpenCV
set(OpenCV_STATIC TRUE)
find_dependency_in_install(OpenCV "")
if(OpenCV_FOUND)
	set_target_properties(IlmImf PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE) #By default the debug libs are tried to use...
	set_target_properties(IlmImf PROPERTIES MAP_IMPORTED_CONFIG_MINSIZEREL RELEASE) #By default the debug libs are tried to use...
endif()
#Find Eigen3
find_dependency_in_install(Eigen3 3.3)
#Find FlatBuffers
find_dependency_in_install(FlatBuffers "")
if (FlatBuffers_FOUND)
	find_path(FLATBUFFERS_INCLUDE_DIR NAMES flatbuffers/flatbuffers.h PATHS "${CMAKE_CURRENT_LIST_DIR}/Third parties/include")
endif()
#Find ZeroMQ
find_dependency_in_install(ZeroMQ "")
if(ZeroMQ_FOUND)
	set_target_properties(libzmq-static PROPERTIES MAP_IMPORTED_CONFIG_RELWITHDEBINFO RELEASE) #By default the debug libs are tried to use...
	set_target_properties(libzmq-static PROPERTIES MAP_IMPORTED_CONFIG_MINSIZEREL RELEASE) #By default the debug libs are tried to use...
endif()
#Find CPPZMQ
find_dependency_in_install(CPPZMQ "")

#Create targets
include(${CMAKE_CURRENT_LIST_DIR}/cmake/@export_targets@-${CMAKE_GENERATOR_PLATFORM}.cmake)

#Map release configurations to an installed configuration
if (_release_installed)
	set(TO_MAP_RELEASE "RELEASE")
elseif(_minsizerel_installed)
	set(TO_MAP_RELEASE "MINSIZEREL")
elseif(_relwithdebinfo_installed)
	set(TO_MAP_RELEASE "RELWITHDEBINFO")
else()
	set(MISSING_RELEASE false)
	foreach (_config ${CMAKE_CONFIGURATION_TYPES})
		string(TOLOWER ${_config} __config)
		if (${__config} STREQUAL "release" OR ${__config} STREQUAL "minsizerel" OR ${__config} STREQUAL "relwithdebinfo")
			set(MISSING_RELEASE true)
		endif()
	endforeach()
	if (MISSING_RELEASE)
		message(SEND_ERROR "The SensorFusion package to be installed does not have release configurations to be installed!")
	endif()
endif()

set(@export_config_name@_LIBS @LIBS_TO_INSTALL@)
if(DEFINED TO_MAP_RELEASE)
	foreach (_config RELEASE MINSIZEREL RELWITHDEBINFO)
		string(TOLOWER ${_config} __config)
		if (NOT _${__config}_installed)
			message(STATUS "Configuration ${_config} not found: ${TO_MAP_RELEASE} will be linked")
			foreach (_target ${@export_config_name@_LIBS})
				set_target_properties(@export_config_name@::${_target} PROPERTIES MAP_IMPORTED_CONFIG_${_config} ${TO_MAP_RELEASE})
			endforeach()
		endif()
	endforeach()
endif()