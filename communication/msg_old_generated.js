// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var DataMsgNameSpace = DataMsgNameSpace || {};

/**
 * @enum {number}
 */
DataMsgNameSpace.DataType = {
  NOISE: 0,
  DISTURBANCE: 1,
  STATE: 2,
  OUTPUT: 3
};

/**
 * @enum {string}
 */
DataMsgNameSpace.DataTypeName = {
  0: 'NOISE',
  1: 'DISTURBANCE',
  2: 'STATE',
  3: 'OUTPUT'
};

/**
 * @enum {number}
 */
DataMsgNameSpace.OperationType = {
  FILTER_TIME_UPDATE: 0,
  FILTER_MEAS_UPDATE: 1,
  SENSOR: 2,
  FILTER_PARAM_ESTIMATION: 3,
  GROUND_TRUTH: 4
};

/**
 * @enum {string}
 */
DataMsgNameSpace.OperationTypeName = {
  0: 'FILTER_TIME_UPDATE',
  1: 'FILTER_MEAS_UPDATE',
  2: 'SENSOR',
  3: 'FILTER_PARAM_ESTIMATION',
  4: 'GROUND_TRUTH'
};

/**
 * @constructor
 */
DataMsgNameSpace.Msg = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {DataMsgNameSpace.Msg}
 */
DataMsgNameSpace.Msg.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {DataMsgNameSpace.Msg=} obj
 * @returns {DataMsgNameSpace.Msg}
 */
DataMsgNameSpace.Msg.getRootAsMsg = function(bb, obj) {
  return (obj || new DataMsgNameSpace.Msg).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {DataMsgNameSpace.DataType}
 */
DataMsgNameSpace.Msg.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {DataMsgNameSpace.DataType} */ (this.bb.readUint8(this.bb_pos + offset)) : DataMsgNameSpace.DataType.NOISE;
};

/**
 * @returns {DataMsgNameSpace.OperationType}
 */
DataMsgNameSpace.Msg.prototype.source = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {DataMsgNameSpace.OperationType} */ (this.bb.readUint8(this.bb_pos + offset)) : DataMsgNameSpace.OperationType.FILTER_TIME_UPDATE;
};

/**
 * @returns {number}
 */
DataMsgNameSpace.Msg.prototype.sensorID = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @returns {number}
 */
DataMsgNameSpace.Msg.prototype.valueVector = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
DataMsgNameSpace.Msg.prototype.valueVectorLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
DataMsgNameSpace.Msg.prototype.valueVectorArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
DataMsgNameSpace.Msg.prototype.varianceMatrix = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
DataMsgNameSpace.Msg.prototype.varianceMatrixLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
DataMsgNameSpace.Msg.prototype.varianceMatrixArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns {flatbuffers.Long}
 */
DataMsgNameSpace.Msg.prototype.timestampInUs = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readUint64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
DataMsgNameSpace.Msg.startMsg = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {DataMsgNameSpace.DataType} type
 */
DataMsgNameSpace.Msg.addType = function(builder, type) {
  builder.addFieldInt8(0, type, DataMsgNameSpace.DataType.NOISE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {DataMsgNameSpace.OperationType} source
 */
DataMsgNameSpace.Msg.addSource = function(builder, source) {
  builder.addFieldInt8(1, source, DataMsgNameSpace.OperationType.FILTER_TIME_UPDATE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} sensorID
 */
DataMsgNameSpace.Msg.addSensorID = function(builder, sensorID) {
  builder.addFieldInt32(2, sensorID, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valueVectorOffset
 */
DataMsgNameSpace.Msg.addValueVector = function(builder, valueVectorOffset) {
  builder.addFieldOffset(3, valueVectorOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
DataMsgNameSpace.Msg.createValueVectorVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
DataMsgNameSpace.Msg.startValueVectorVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} varianceMatrixOffset
 */
DataMsgNameSpace.Msg.addVarianceMatrix = function(builder, varianceMatrixOffset) {
  builder.addFieldOffset(4, varianceMatrixOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
DataMsgNameSpace.Msg.createVarianceMatrixVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
DataMsgNameSpace.Msg.startVarianceMatrixVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} timestampInUs
 */
DataMsgNameSpace.Msg.addTimestampInUs = function(builder, timestampInUs) {
  builder.addFieldInt64(5, timestampInUs, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
DataMsgNameSpace.Msg.endMsg = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
DataMsgNameSpace.Msg.finishMsgBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {DataMsgNameSpace.DataType} type
 * @param {DataMsgNameSpace.OperationType} source
 * @param {number} sensorID
 * @param {flatbuffers.Offset} valueVectorOffset
 * @param {flatbuffers.Offset} varianceMatrixOffset
 * @param {flatbuffers.Long} timestampInUs
 * @returns {flatbuffers.Offset}
 */
DataMsgNameSpace.Msg.createMsg = function(builder, type, source, sensorID, valueVectorOffset, varianceMatrixOffset, timestampInUs) {
  DataMsgNameSpace.Msg.startMsg(builder);
  DataMsgNameSpace.Msg.addType(builder, type);
  DataMsgNameSpace.Msg.addSource(builder, source);
  DataMsgNameSpace.Msg.addSensorID(builder, sensorID);
  DataMsgNameSpace.Msg.addValueVector(builder, valueVectorOffset);
  DataMsgNameSpace.Msg.addVarianceMatrix(builder, varianceMatrixOffset);
  DataMsgNameSpace.Msg.addTimestampInUs(builder, timestampInUs);
  return DataMsgNameSpace.Msg.endMsg(builder);
}

// Exports for Node.js and RequireJS
this.DataMsgNameSpace = DataMsgNameSpace;
